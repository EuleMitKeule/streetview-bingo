openapi: "3.0.0"

info:
  title: streetview-bingo
  version: "0.1"

servers:
  - url: /api/

paths:

  /lobby/:
    post:
      summary: Creates a new lobby
      operationId: api.create_lobby
      tags:
        - Lobby
      requestBody:
        description: The user token of the user creating the lobby
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Returns unique user and lobby token
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  lobby:
                    $ref: '#/components/schemas/Lobby'

  /lobby/{lobby_token}:
    get:
      summary: Gets info about a lobby
      operationId: api.get_lobby
      tags:
        - Lobby
      parameters:
        - in: path
          name: lobby_token
          description: The lobby token of the lobby to obtain info on
          required: true
          schema:
            type: string
        - in: query
          name: user_token
          description: The user token of the user creating the lobby
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns information about the lobby
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
  

  /lobby/{lobby_token}/join:
    post:
      summary: Joins a lobby
      operationId: api.join_lobby
      tags:
        - Lobby
      parameters:
        - in: path
          name: lobby_token
          description: The lobby token of the lobby to join
          required: true
          schema:
            type: string
      requestBody:
        description: The user token of the user joining the lobby
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Returns OK if lobby was joined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                

  /lobby/{lobby_token}/game/:
    post:
      summary: Creates a new game of streetview bingo
      operationId: api.create_game
      tags:
        - Game
      parameters:
        - in: path
          name: lobby_token
          description: The lobby token of the lobby to create the game in
          required: true
          schema:
            type: string
        - in: query
          name: user_token
          description: The user token of the user creating the lobby
          required: true
          schema:
            type: string
      requestBody:
        description: Contains the game information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '200':
          description: Returns the id of the created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

  /lobby/{lobby_token}/game/{game_token}:
    get:
      summary: Gets a game
      operationId: api.get_game
      tags:
          - Game
      parameters:
        - in: path
          name: lobby_token
          description: The lobby token of the lobby to create the game in
          required: true
          schema:
            type: string
        - in: path
          name: game_token
          description: The lobby token of the lobby to create the game in
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the id of the created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

    put:
      summary: Changes a game
      operationId: api.update_game
      tags:
        - Game
      parameters:
        - in: path
          name: lobby_token
          description: The lobby token of the lobby to create the game in
          required: true
          schema:
            type: string
        - in: path
          name: game_token
          description: The lobby token of the lobby to create the game in
          required: true
          schema:
            type: string
        - in: query
          name: user_token
          description: The user token of the user creating the lobby
          required: true
          schema:
            type: string
      requestBody:
        description: Contains the game information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '200':
          description: Returns the id of the created game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

  /lobby/{lobby_token}/game/{game_token}/words/{word_id}/users/{user_id}:
    post:
      summary: Sets word as found for specified user
      operationId: api.create_word_status
      tags:
        - Game
      parameters:
        - in: path
          name: lobby_token
          description: The token of the lobby in which the game is running
          required: true
          schema:
            type: string
        - in: path
          name: game_token
          description: The id of the game to set the word in
          required: true
          schema:
            type: integer
        - in: path
          name: word_id
          description: The id of the word to set
          required: true
          schema:
            type: integer
        - in: path
          name: user_id
          description: The id of user to set the word to found on
          required: true
          schema:
            type: integer
        - in: query
          name: user_token
          description: The user token of the user creating the lobby
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns OK if the word could be set as found
          
    delete:
      summary: Sets previously found word as not found for specified user
      operationId: api.delete_word_status
      tags:
        - Game
      parameters:
        - in: path
          name: lobby_token
          description: The token of the lobby in which the game is running
          required: true
          schema:
            type: string
        - in: path
          name: game_token
          description: The id of the game to set the word in
          required: true
          schema:
            type: integer
        - in: path
          name: word_id
          description: The id of the word to set
          required: true
          schema:
            type: integer
        - in: path
          name: user_id
          description: The id of user to set the word to found on
          required: true
          schema:
            type: integer
        - in: query
          name: user_token
          description: The user token of the user creating the lobby
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns OK if the status was deleted

  /user:
    get:
      summary: Gets a user by token
      operationId: api.get_user
      tags:
        - User
      parameters:
        - in: query
          name: token
          description: The token of the user to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /word:
    get:
      summary: Gets list of suggested words
      operationId: api.get_words
      tags:
        - Word
      parameters:
        - in: query
          name: length
          description: The length of the words list
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Returns list of suggested words of requested length
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Word'
    
components:
  schemas:

    Lobby:
      type: object
      properties:
        id:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        owner:
          $ref: '#/components/schemas/User'
        token:
          type: string

    Word:
      type: object
      properties:
        id:
            type: integer
        text:
          type: string

    Game:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
        status:
          type: string
          enum: [created, started, ended]
        moderator:
          $ref: '#/components/schemas/User'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        lobby:
          type: object
            $ref: '#/components/schemas/Lobby'
        words:
          type: array
          items:
            $ref: '#/components/schemas/GameWord'
        # foundStatus:
        #   type: object
        #   additionalProperties:
        #     type: array
        #     items:
        #       $ref: '#/components/schemas/User'

    GameWord:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
        name:
          type: string